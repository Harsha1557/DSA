ARRAYS:-
  -->collection of similar kind of data in a continuous allocation.
  -->in C & C++ we have pointers so definately elements will be stored in continuous formate.
  -->in JAVA we dont have pointers then there is a chance of elements might stored in random places.

 SYSTAX:-
 ->datatype[] and arrayname;

PREMITIVE & NON-PREMITIVE:-
->premitive datatypes can't be splitted or divided
example:int,float,char
->non-premitive datatypes can be splitted or divided.
example:string and all the objects that can be created by users.

class node{
 int data;
 node next;
}
->all the objects will be stored in heap memory.
->all the references will be stored in stack memory.

->stack memory having less space compared to heap memory.

all the variables are storing same datatypes
instead of creating multiple variables, create an array	

if we create multiple variables to get the data, simply we get the data
when it comes to array if we want to print the data we can print using index values, and by default index values will start with zero

int[] arr = {1,2,3,4,5};

-> from above line declaration and intiallization happened at same time

int[] arr; // declaration happened here
int arr[] = {1,2,3,4,5} // initiallization happened here.


class Main {
    public static void main(String[] args) {
      
        int[] arr = {1,2,3,4,5};
        for(int i=0; i<=arr.length; i++){
            System.out.println(arr[i]);
        }
        
    }
}
to get the length of the array, we have method called {arr.length}

SNAKE & CAMle CASES
in java it is prefered to use camle case to write production level code
camle case example:-
void additionOfTwoNumbers(){
}

type of printing formats:-
1->

class Main {
    public static void main(String[] args) {
        // System.out.println("Try programiz.pro");
        int [] arr = {1,2,3,4,5};
        for(int i=0; i<arr.length; i++){
            
            System.out.print(arr[i]+" ");
        }
        
    }
}

2-> 

class Main {
    public static void main(String[] args) {
       
        int [] arr = {1,2,3,4,5};
        for(int i : arr){
             System.out.print(i+" ");
        }
    }
}

-->in each loop we dont need index values.

import java.util.*;
class Main {
    public static void main(String[] args) {
       
        int [] arr = {1,2,3,4,5};
             System.out.print(Arrays.toString(arr));
    }
}

-->toString is an inbuilt method to print array.

-->toString can accept only one argument and that to array.

-->declaring the size of an array , intiallizing the values later.

-->array having fixed size, if we declare an array size it can't be change.

-->int [] arr = new int[5];

-->before equalto array reference was created, with the help of (new )keyord actual object will be created in the heap memory,
	for that particular datatype and size.
-->if the array type is int all the default values are zero's.
-->if it is a string default values are NULL or empty space.
-->all the string are literal 

import java.util.*;
class Main {
    public static void main(String[] args) {
       
        int [] arr = new int[5];
        arr[0] = 1;
        arr[1] = 2;
        arr[2] = 3;
        arr[3] = 4;
        arr[4] = 5;
    }
}

--> when ever you trying to assign or trying to get nth value of array, you can get exception called array out of bound. 


---> to print no even values and no.of odd values in the given array.

import java.util.*;
class Main {
    public static void main(String[] args) {
       int[] arr = {1,2,3,4,5};
       int evenCount = 0;
       int oddCount = 0;
        for(int i=0; i<arr.length; i++){
            
            if(arr[i]%2==0){
                
                evenCount++;
            }
            else{
                oddCount++;
            }
            
        }
        System.out.println(evenCount);
        System.out.println(oddCount);

    }
}

---> to give first and second heighest values in the given array

import java.util.*;
class Main {
    public static void main(String[] args) {
       int[] arr = {1,2,3,6,7,5};
       int heighestValue = arr[0];
       int secondHeighest = arr[0];
        for(int i=1; i<arr.length; i++){
            
            if(arr[i] > heighestValue){
                heighestValue = arr[i];
            }
        }

        for(int i=1; i<arr.length; i++){
            
            if(arr[i] > secondHeighest && arr[i] != heighestValue && secondHeighest != heighestValue){
                secondHeighest = arr[i];
            }
        }
        System.out.println(heighestValue);
        System.out.println(secondHeighest);
    }
}

